import type { BridgeActionParams } from '@rabbitholegg/questdk'
import { GreaterThanOrEqual } from '@rabbitholegg/questdk'
import { createTestCase, type TestParams } from './utils'
import { parseEther, parseUnits, zeroAddress } from 'viem'

export const DAI_OP_GNOSIS: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 10,
    to: '0x8f7492de823025b4cfaab1d34c58963f2af5deda',
    from: '0xd59a74e615c9d55422ed8c5ce64cb50fda0bb58d',
    hash: '0x22d3715ca5ae0bd0d87f9341fafc7a330fd6962e13bf318a6a541c93e4e6bc04',
    input:
      '0x93f18ac50000000000000000000000000000000000000000000000000000000000676e6f000000000000000000000000642c27a96dffb6f21443a89b789a3194ff8399fa000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da1000000000000000000000000d59a74e615c9d55422ed8c5ce64cb50fda0bb58d000000000000000000000000000000000000000000000000204d764a78eac238000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000050b91c62117dc0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d59a74e615c9d55422ed8c5ce64cb50fda0bb58d',
    value: '0',
  },
  params: {
    chainId: 10,
    destinationChainId: 100,
    tokenAddress: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',
    amount: GreaterThanOrEqual(parseEther('2')),
    recipient: '0xd59a74e615c9d55422ed8c5ce64cb50fda0bb58d',
  },
}

export const ETH_OP_POLYGON: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 10,
    to: '0xb0eef3e1de973d045c3858e072c540299585252d',
    from: '0xa4c8bb4658bc44bac430699c8b7b13dab28e0f4e',
    hash: '0xb8e2c0baf137b64553c91f286bde62cc37275d0b9f9d3e6c0041c6be79de45af',
    input:
      '0x8d80ff0a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000026b004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000008af8a1fa5fcc180000000000000000000000000000000000000000000000000000000000000004d0e30db000420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b30000000000000000000000008f7492de823025b4cfaab1d34c58963f2af5deda000000000000000000000000000000000000000000000000008af8a1fa5fcc18008f7492de823025b4cfaab1d34c58963f2af5deda0000000000000000000000000000000000000000000000000026aa1a3465338400000000000000000000000000000000000000000000000000000000000001248aac16ba0000000000000000000000000000000000000000000000000000000000657468000000000000000000000000268682b7d9992ae7e2ca4a8bcc9d9655fb06056f0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000a4c8bb4658bc44bac430699c8b7b13dab28e0f4e000000000000000000000000000000000000000000000000008af8a1fa5fcc18000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a4c8bb4658bc44bac430699c8b7b13dab28e0f4e000000000000000000000000000000000000000000',
    value: '49999999999999900',
  },
  params: {
    chainId: 10,
    destinationChainId: 137,
    tokenAddress: zeroAddress,
    amount: GreaterThanOrEqual(parseEther('0.001')),
    recipient: '0xa4c8bb4658bc44bac430699c8b7b13dab28e0f4e',
  },
}

export const ETH_OP_ARBITRUM: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 10,
    to: '0xb0eef3e1de973d045c3858e072c540299585252d',
    from: '0x9333f2d9861e367dbf6072bcd55325cc133c6d86',
    hash: '0x00b92f23522b23648f0bb05529a728dcca55b1cc08347d68bae50c24977621ed',
    input:
      '0x8d80ff0a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000026b00420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000003258eb8854cd0000000000000000000000000000000000000000000000000000000000000004d0e30db000420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b30000000000000000000000008f7492de823025b4cfaab1d34c58963f2af5deda00000000000000000000000000000000000000000000000000003258eb8854cd008f7492de823025b4cfaab1d34c58963f2af5deda0000000000000000000000000000000000000000000000000000ba1f0c1beadc00000000000000000000000000000000000000000000000000000000000001248aac16ba000000000000000000000000000000000000000000000000000000006172626f000000000000000000000000429b9eb01362b2799131efcc44319689b662999d00000000000000000000000042000000000000000000000000000000000000060000000000000000000000009333f2d9861e367dbf6072bcd55325cc133c6d8600000000000000000000000000000000000000000000000000003258eb8854cd000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000200000000000000000000000009333f2d9861e367dbf6072bcd55325cc133c6d86000000000000000000000000000000000000000000',
    value: '49999999999999900',
  },
  params: {
    chainId: 10,
    destinationChainId: 42161,
    tokenAddress: zeroAddress,
    amount: GreaterThanOrEqual(parseEther('0.00005')),
    recipient: '0x9333f2d9861e367dbf6072bcd55325cc133c6d86',
  },
}

export const passingTestCases = [
  createTestCase(DAI_OP_GNOSIS, 'when bridging tokens'),
  createTestCase(ETH_OP_POLYGON, 'when bridging ETH'),
  createTestCase(ETH_OP_ARBITRUM, 'when bridging ETH to arbitrum'),
  createTestCase(DAI_OP_GNOSIS, 'when bridging tokens', {
    tokenAddress: undefined,
    amount: undefined,
  }),
  createTestCase(ETH_OP_POLYGON, 'when bridging ETH', {
    tokenAddress: undefined,
    amount: undefined,
  }),
  createTestCase(ETH_OP_ARBITRUM, 'when bridging ETH to arbitrum', {
    tokenAddress: undefined,
    amount: undefined,
  }),
]

export const failingTestCases = [
  createTestCase(DAI_OP_GNOSIS, 'when chainId is not correct', {
    chainId: 42161,
  }),
  createTestCase(DAI_OP_GNOSIS, 'when destinationChainId is not correct', {
    destinationChainId: 42161,
  }),
  createTestCase(DAI_OP_GNOSIS, 'when tokenAddress is not correct', {
    tokenAddress: '0x7F5c764cBc14f9669B88837ca1490cCa17c31607',
  }),
  createTestCase(
    ETH_OP_POLYGON,
    'when bridging ETH and amount is insufficient',
    { amount: GreaterThanOrEqual(parseEther('1000')) },
  ),
  createTestCase(
    DAI_OP_GNOSIS,
    'when bridging tokens and amount is insufficient',
    { amount: GreaterThanOrEqual(parseUnits('10000', 18)) },
  ),
  createTestCase(ETH_OP_ARBITRUM, 'when recipient is not correct', {
    recipient: '0xa4c8bb4658bc44bac430699c8b7b13dab28e0f4e',
  }),
]
