import {
  type BridgeActionParams,
  GreaterThanOrEqual,
} from '@rabbitholegg/questdk'
import {
  Chains,
  type TestParams,
  createTestCase,
} from '@rabbitholegg/questdk-plugin-utils'
import { parseUnits } from 'viem'

export const BRIDGE_ERC20: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 1,
    from: '0x6e4ce0a80980ac5b8738979a91bff1aff1a21081',
    hash: '0x6d0268ab79686bc0e626c86f51e1242e592a88bec7d94415cfbcac2d0835cb90',
    input:
      '0x8708762300000000000000000000000044ff8620b8ca30902395a7bd3f2407e1a091bf730000000000000000000000000b3e328455c4059eeb9e3f84b5543f74e24e7e1b000000000000000000000000000000000000000000000fe1c215e8f838e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000',
    to: '0x3154cf16ccdb4c6d922629664174b904d80f2c35',
    value: '0',
  },
  params: {
    sourceChainId: 1,
    destinationChainId: Chains.BASE,
    tokenAddress: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
    amount: GreaterThanOrEqual(75000000000000000000000n),
    recipient: '0x6e4ce0a80980ac5b8738979a91bff1aff1a21081',
  },
}
export const BRIDGE_ERC20_TO: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 1,
    from: '0x4695dfa07d05a25cde13004647e8e8cebc3bc6a8',
    hash: '0x8858f063162ea03a0346dd3436be15fcab53b92fc4b807f813498655a812818a',
    input:
      '0x540abf730000000000000000000000006b66ccd1340c479b07b390d326eadcbb84e726ba0000000000000000000000001c7a460413dd4e964f96d8dfc56e7223ce88cd850000000000000000000000004695dfa07d05a25cde13004647e8e8cebc3bc6a80000000000000000000000000000000000000000000000fa128b120f96f7800000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000',
    to: '0x3154cf16ccdb4c6d922629664174b904d80f2c35',
    value: '0',
  },
  params: {
    sourceChainId: 1,
    destinationChainId: Chains.BASE,
    tokenAddress: '0x6b66ccd1340c479B07B390d326eaDCbb84E726Ba',
    amount: GreaterThanOrEqual(4600000000000000000000n),
    recipient: '0x4695dfa07d05a25cde13004647e8e8cebc3bc6a8',
  },
}
export const BRIDGE_ETH: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 1,
    from: '0xdfdea277f6b44270bcb804997d1e6cc4ad8407db',
    hash: '0x41607489b6512f77547c5f8f80b6a51cd9be77690cb4210bd5294dfe74163c4d',
    input:
      '0x09fc88430000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000',
    to: '0x3154cf16ccdb4c6d922629664174b904d80f2c35',
    value: '10000000000000000',
  },
  params: {
    sourceChainId: 1,
    destinationChainId: Chains.BASE,
    tokenAddress: '0x0000000000000000000000000000000000000000',
    amount: GreaterThanOrEqual(10000000000000000n),
    recipient: '0xdfdea277f6b44270bcb804997d1e6cc4ad8407db',
  },
}
export const BRIDGE_ETH_TO: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 1,
    from: '0x638c4cc1c0a93316000c96898f9264c67f3a409f',
    hash: '0x84f6e50fe4cd8e0dc90eeeaf06cc81147fa4d97015c593e79bb9b3cf85236ea2',
    input:
      '0xe11013dd000000000000000000000000638c4cc1c0a93316000c96898f9264c67f3a409f0000000000000000000000000000000000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000b7375706572627269646765000000000000000000000000000000000000000000',
    to: '0x3154cf16ccdb4c6d922629664174b904d80f2c35',
    value: '5000000000000000000',
  },
  params: {
    sourceChainId: 1,
    destinationChainId: Chains.BASE,
    tokenAddress: '0x0000000000000000000000000000000000000000',
    amount: GreaterThanOrEqual(5000000000000000000n),
    recipient: '0x638c4cc1c0a93316000c96898f9264c67f3a409f',
  },
}
export const DEPOSIT_ERC20: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 1,
    from: '0xca74f404e0c7bfa35b13b511097df966d5a65597',
    hash: '0x0679ef18d0f614cf0bdb8dc3d352f6066de0854f77dfa8d4457d0eea6746623e',
    input:
      '0x58a997f6000000000000000000000000c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f00000000000000000000000022e6966b799c4d5b13be962e1d117b56327fda6600000000000000000000000000000000000000000000003a5eba56c5c492c8f9000000000000000000000000000000000000000000000000000000000007a12000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000',
    to: '0x3154cf16ccdb4c6d922629664174b904d80f2c35',
    value: '0',
  },
  params: {
    sourceChainId: 1,
    destinationChainId: Chains.BASE,
    tokenAddress: '0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f',
    amount: GreaterThanOrEqual(1050000000000000000000n),
    recipient: '0xca74f404e0c7bfa35b13b511097df966d5a65597',
  },
}
export const DEPOSIT_ERC20_TO: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 1,
    from: '0x85a7259a24cf9a37aed71c5f3462edaae2566b37',
    hash: '0xcd79937dae9c4ecea48e2837eb60f2f486fd48708a2aa7947d66c98c5b6346d2',
    input:
      '0x838b2520000000000000000000000000fe3b138879d6d0555be4132dcfe6e7424e257a2e00000000000000000000000004d1963c76eb1bec59d0eeb249ed86f736b8299300000000000000000000000085a7259a24cf9a37aed71c5f3462edaae2566b3700000000000000000000000000000000000000000000010ac914401cb8ac00000000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000b7375706572627269646765000000000000000000000000000000000000000000',
    to: '0x3154cf16ccdb4c6d922629664174b904d80f2c35',
    value: '0',
  },
  params: {
    sourceChainId: 1,
    destinationChainId: Chains.BASE,
    tokenAddress: '0xfe3b138879d6d0555be4132dcfe6e7424e257a2e',
    amount: GreaterThanOrEqual(4920000000000000000000n),
    recipient: '0x85a7259a24cf9a37aed71c5f3462edaae2566b37',
  },
}
export const DEPOSIT_ETH: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 1,
    from: '0xa4bc46269694e00531c059e176c8d98b3600fba6',
    hash: '0xfcf6da7eb2617473f5a81aaa2b6f57b3e93f7ae2bbb0ca48a351e96a1be27ca8',
    input:
      '0xb1a1a8820000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000',
    to: '0x3154cf16ccdb4c6d922629664174b904d80f2c35',
    value: '100508710767453794500',
  },
  params: {
    sourceChainId: 1,
    destinationChainId: Chains.BASE,
    tokenAddress: '0x0000000000000000000000000000000000000000',
    amount: GreaterThanOrEqual(100000000000000000000n),
    recipient: '0xa4bc46269694e00531c059e176c8d98b3600fba6',
  },
}
export const DEPOSIT_ETH_TO: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 1,
    from: '0x3fc2ec80079b150a0ba345543454aea480036fe0',
    hash: '0x3b7135556ccc489c0d595fa49a0703f96ecedbaf8fb19663aff72fe90aef2f18',
    input:
      '0x9a2ac6d500000000000000000000000085772752e3b5ff0917345c67d51f20caf1e1de5b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000bcac4a695dbc00000000000000000000000000000000000000000000000000000',
    to: '0x3154cf16ccdb4c6d922629664174b904d80f2c35',
    value: '500000000000000',
  },
  params: {
    sourceChainId: 1,
    destinationChainId: Chains.BASE,
    tokenAddress: '0x0000000000000000000000000000000000000000',
    amount: GreaterThanOrEqual(500000000000000n),
    recipient: '0x85772752e3b5ff0917345c67d51f20caf1e1de5b',
  },
}
export const WITHDRAW_ETH: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 8453,
    from: '0x021245914ba2286e7c721732b7179ec97ef643d1',
    hash: '0x03f3baff669c93eb268fe5755c5a054072a480ff9dc2d43fcb7196f18a411149',
    input:
      '0x32b7006d000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead0000000000000000000000000000000000000000000000000002c152664707512924000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000',
    to: '0x4200000000000000000000000000000000000010',
    value: '50823797200080939300',
  },
  params: {
    sourceChainId: 8453,
    destinationChainId: Chains.ETHEREUM,
    tokenAddress: '0x0000000000000000000000000000000000000000',
    amount: GreaterThanOrEqual(50000000000000000000n),
    recipient: '0x021245914ba2286e7c721732b7179ec97ef643d1',
  },
}
export const WITHDRAW_ERC20: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 8453,
    from: '0xa268e1758f889222451c3c69d8cd81b572fefd84',
    hash: '0x31cfd1f087e7a3fe7a3ddb242d8a6b1773565c186bdd84f3fd7b02ae78c0f911',
    input:
      '0x32b7006d00000000000000000000000050c5725949a6f0c72e6c4a641f24049a917db0cb000000000000000000000000000000000000000000000001d9ff6f80d8bebc3700000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000',
    to: '0x4200000000000000000000000000000000000010',
    value: '0',
  },
  params: {
    sourceChainId: 8453,
    destinationChainId: Chains.ETHEREUM,
    tokenAddress: '0x50c5725949a6f0c72e6c4a641f24049a917db0cb',
    amount: GreaterThanOrEqual(34000000000000000000n),
    recipient: '0xa268e1758f889222451c3c69d8cd81b572fefd84',
  },
}
export const WITHDRAW_TO: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 8453,
    from: '0x4ab738d96efbf258c8c903be036c68d88157e0e4',
    hash: '0x5909042c38e67c67df9598fe44f8306f11e7868d830e6e3c89c7ac57de572065',
    input:
      '0xa3a79548000000000000000000000000717d31a60a9e811469673429c9f8ea24358990f10000000000000000000000004ab738d96efbf258c8c903be036c68d88157e0e40000000000000000000000000000000000000000000000a4cc799563c38000000000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000b7375706572627269646765000000000000000000000000000000000000000000',
    to: '0x4200000000000000000000000000000000000010',
    value: '0',
  },
  params: {
    sourceChainId: 8453,
    destinationChainId: Chains.ETHEREUM,
    tokenAddress: '0x717d31a60a9e811469673429c9f8ea24358990f1',
    amount: GreaterThanOrEqual(3000000000000000000000n),
    recipient: '0x4ab738d96efbf258c8c903be036c68d88157e0e4',
  },
}
export const WITHDRAW_BRIDGE_ETH_TO: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 8453,
    from: '0x1ff29c73dda1ddf6981b9b12fd9fded56c7e3478',
    hash: '0x5bd08bd00b173cd368daee486209f1efc405a4a930950284142d174b1c5f3f48',
    input:
      '0xe11013dd0000000000000000000000001ff29c73dda1ddf6981b9b12fd9fded56c7e34780000000000000000000000000000000000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000b7375706572627269646765000000000000000000000000000000000000000000',
    to: '0x4200000000000000000000000000000000000010',
    value: '12000000000000000',
  },
  params: {
    sourceChainId: 8453,
    destinationChainId: Chains.ETHEREUM,
    tokenAddress: '0x0000000000000000000000000000000000000000',
    amount: GreaterThanOrEqual(10000000000000000n),
    recipient: '0x1ff29c73dda1ddf6981b9b12fd9fded56c7e3478',
  },
}
export const WITHDRAW_BRIDGE_ERC20_TO: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 8453,
    from: '0x2a3399e9a7f89ee27f99e111fd188bf9644fc83c',
    hash: '0x0310ec5fede91f898df30f8436b1a860bf9d35016fb3f9fd46e725765e8fba8a',
    input:
      '0x540abf73000000000000000000000000717d31a60a9e811469673429c9f8ea24358990f10000000000000000000000009afa9999e45484adf5d8eed8d9dfe0693bacd8380000000000000000000000002a3399e9a7f89ee27f99e111fd188bf9644fc83c0000000000000000000000000000000000000000000000d736d14e09dcc800000000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000b7375706572627269646765000000000000000000000000000000000000000000',
    to: '0x4200000000000000000000000000000000000010',
    value: '0',
  },
  params: {
    sourceChainId: 8453,
    destinationChainId: Chains.ETHEREUM,
    tokenAddress: '0x717d31A60a9e811469673429c9F8Ea24358990f1',
    amount: GreaterThanOrEqual(3900000000000000000000n),
    recipient: '0x2a3399e9a7f89ee27f99e111fd188bf9644fc83c',
  },
}
export const WITHDRAW_BRIDGE_ERC20: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 8453,
    from: '0xcb3f3e0e992435390e686d7b638fcb8baba6c5c7',
    hash: '0x7d21742fdc2ee4bc6dfbd1e3cc09265031c3a78744b87f3e2a9c23a4619f4057',
    input:
      '0x8708762300000000000000000000000037f0c2915cecc7e977183b8543fc0864d03e064c0000000000000000000000009aab071b4129b083b01cb5a0cb513ce7eca26fa500000000000000000000000000000000000000000000000001b667a56d4880000000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000',
    to: '0x4200000000000000000000000000000000000010',
    value: '0',
  },
  params: {
    sourceChainId: 8453,
    destinationChainId: Chains.ETHEREUM,
    tokenAddress: '0x37f0c2915CeCC7e977183B8543Fc0864d03E064C',
    amount: GreaterThanOrEqual(120000000000000000n),
    recipient: '0xcb3f3e0e992435390e686d7b638fcb8baba6c5c7',
  },
}

export const passingTestCases = [
  createTestCase(BRIDGE_ERC20, 'when bridgeERC20 (ETH->BASE)'),
  createTestCase(BRIDGE_ERC20_TO, 'when bridgeERC20To (ETH->BASE)'),
  createTestCase(BRIDGE_ETH, 'when bridgeETH (ETH->BASE)'),
  createTestCase(BRIDGE_ETH_TO, 'when bridgeETHTo (ETH->BASE)'),
  createTestCase(DEPOSIT_ERC20, 'when depositERC20 (ETH->BASE)'),
  createTestCase(DEPOSIT_ERC20_TO, 'when depositERC20To (ETH->BASE)'),
  createTestCase(DEPOSIT_ETH, 'when depositETH (ETH->BASE)'),
  createTestCase(DEPOSIT_ETH_TO, 'when depositETHTo (ETH->BASE)'),
  createTestCase(WITHDRAW_ETH, 'when withdraw (BASE->ETH)'),
  createTestCase(WITHDRAW_ERC20, 'when withdraw (ERC) (BASE->ETH)'),
  createTestCase(WITHDRAW_TO, 'when withdrawTo (ERC) (BASE->ETH)'),
  createTestCase(WITHDRAW_BRIDGE_ETH_TO, 'when bridgeETHTo (BASE->ETH)'),
  createTestCase(WITHDRAW_BRIDGE_ERC20_TO, 'when bridgeERC20To (BASE->ETH)'),
  createTestCase(WITHDRAW_BRIDGE_ERC20, 'when bridgeERC20 (BASE->ETH)'),
  createTestCase(BRIDGE_ERC20_TO, 'when tokenAddress is "any"', {
    tokenAddress: undefined,
  }),
  createTestCase(BRIDGE_ETH, 'when amount is "any"', {
    amount: undefined,
  }),
  createTestCase(DEPOSIT_ERC20_TO, 'when both amount and token are "any"', {
    amount: undefined,
    tokenAddress: undefined,
  }),
  createTestCase(WITHDRAW_TO, 'when all optional params are "any"', {
    amount: undefined,
    tokenAddress: undefined,
    recipient: undefined,
  }),
]

export const failingTestCases = [
  createTestCase(WITHDRAW_ETH, 'when sourceChainId is not correct', {
    sourceChainId: 10,
  }),
  createTestCase(BRIDGE_ETH, 'when destinationChainId is not correct', {
    destinationChainId: 10,
  }),
  createTestCase(BRIDGE_ERC20, 'when amount is not correct', {
    amount: GreaterThanOrEqual(parseUnits('1000000', 18)),
  }),
  createTestCase(BRIDGE_ERC20_TO, 'when tokenAddress is not correct', {
    tokenAddress: '0x04d1963c76eb1bec59d0eeb249ed86f736b82993',
  }),
  createTestCase(WITHDRAW_TO, 'when recipient is not correct', {
    recipient: '0x04d1963c76eb1bec59d0eeb249ed86f736b82993',
  }),
]
