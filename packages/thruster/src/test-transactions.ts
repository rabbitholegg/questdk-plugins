import {
  GreaterThanOrEqual,
  type SwapActionParams,
} from '@rabbitholegg/questdk'
import {
  type TestParams,
  createTestCase,
} from '@rabbitholegg/questdk-plugin-utils'
import { parseEther } from 'viem'

//-------------V3-Swap-Methods-------------//

export const ETH_FOR_TOKENS_V3: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 81457,
    from: '0x865c301c46d64de5c9b124ec1a97ef1efc1bcbd1',
    hash: '0x98cdfa3604393a95dfe788ee0c011aee96193f835f7d243a709fa3c3dbaacd90',
    input:
      '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000124f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000865c301c46d64de5c9b124ec1a97ef1efc1bcbd100000000000000000000000000000000000000000000000000000000660ddb7c0000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000000000ad9f13598e6b0000000000000000000000000000000000000000000000000000000000000002b43000000000000000000000000000000000000030001f4430000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000',
    to: '0x337827814155ecbf24d20231fca4444f530c0555',
    value: '3054379776665264',
  },
  params: {
    chainId: 81457,
    amountIn: GreaterThanOrEqual(3000000000000000n),
    tokenIn: '0x0000000000000000000000000000000000000000',
    tokenOut: '0x4300000000000000000000000000000000000003',
    amountOut: GreaterThanOrEqual(1n),
  },
}
export const TOKENS_FOR_ETH_V3: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 81457,
    from: '0x865c301c46d64de5c9b124ec1a97ef1efc1bcbd1',
    hash: '0xc54b360c23aaf60a6110b634d5c9962ebea2e1794aa46359d79ded170b979e28',
    input:
      '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000124c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000660de0c7000000000000000000000000000000000000000000000000ca48172a3195e76400000000000000000000000000000000000000000000000000007cca1f6be35e000000000000000000000000000000000000000000000000000000000000002b5ffd9ebd27f2fcab044c0f0a26a45cb62fa29c06000bb8430000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000007cca1f6be35e000000000000000000000000865c301c46d64de5c9b124ec1a97ef1efc1bcbd100000000000000000000000000000000000000000000000000000000',
    to: '0x337827814155ecbf24d20231fca4444f530c0555',
    value: '0',
  },
  params: {
    chainId: 81457,
    amountIn: GreaterThanOrEqual(1450000000000000000n),
    tokenIn: '0x5ffd9ebd27f2fcab044c0f0a26a45cb62fa29c06',
    tokenOut: '0x0000000000000000000000000000000000000000',
    amountOut: GreaterThanOrEqual(1n),
  },
}
export const TOKENS_FOR_TOKENS_V3: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 81457,
    from: '0x865c301c46d64de5c9b124ec1a97ef1efc1bcbd1',
    hash: '0x855ac4c246150a531d11159b543bd3adb08beb04c5ab773850c77176fa74a421',
    input:
      '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000124c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000865c301c46d64de5c9b124ec1a97ef1efc1bcbd100000000000000000000000000000000000000000000000000000000660df2ea0000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000000000055d51eab75648000000000000000000000000000000000000000000000000000000000000002b43000000000000000000000000000000000000030001f4430000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    to: '0x337827814155ecbf24d20231fca4444f530c0555',
    value: '0',
  },
  params: {
    chainId: 81457,
    amountIn: GreaterThanOrEqual(5000000000000000000n),
    tokenIn: '0x4300000000000000000000000000000000000003',
    tokenOut: '0x4300000000000000000000000000000000000004',
    amountOut: GreaterThanOrEqual(1n),
  },
}

//-------------V2-Swap-Methods-------------//

export const EXACT_ETH_FOR_TOKENS_V2: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 81457,
    from: '0xeb839a2d8d9c2c74a49756ef47db3e911a831e8f',
    hash: '0xecf1fc7444ae399d81de461072d7d35c306ca079db11db5873852b9c5905d1b9',
    input:
      '0x7ff36ab500000000000000000000000000000000000000000000001f78d513e42da269760000000000000000000000000000000000000000000000000000000000000080000000000000000000000000eb839a2d8d9c2c74a49756ef47db3e911a831e8f00000000000000000000000000000000000000000000000000000000660df65300000000000000000000000000000000000000000000000000000000000000020000000000000000000000004300000000000000000000000000000000000004000000000000000000000000d582879453337bd149ae53ec2092b0af5281d1d7',
    to: '0x98994a9a7a2570367554589189dc9772241650f6',
    value: '2000000000000000',
  },
  params: {
    chainId: 81457,
    amountIn: GreaterThanOrEqual(2000000000000000n),
    tokenIn: '0x0000000000000000000000000000000000000000',
    tokenOut: '0xd582879453337bd149ae53ec2092b0af5281d1d7',
    amountOut: GreaterThanOrEqual(500000000000000000000n),
  },
}
export const ETH_FOR_EXACT_TOKENS_V2: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 81457,
    from: '0x0cdbd3c78615d7f9f94db33bd9a435b42e92a721',
    hash: '0xe7037ea1ddee28c936af545628c466230d491fdbd725c2b4a1b32d4869cf137a',
    input:
      '0xfb3bdb410000000000000000000000000000000000000000000000006f05b59d3b20000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000cdbd3c78615d7f9f94db33bd9a435b42e92a72100000000000000000000000000000000000000000000000000000000660deb95000000000000000000000000000000000000000000000000000000000000000200000000000000000000000043000000000000000000000000000000000000040000000000000000000000004300000000000000000000000000000000000003',
    to: '0x98994a9a7a2570367554589189dc9772241650f6',
    value: '2000000000000000',
  },
  params: {
    chainId: 81457,
    amountIn: GreaterThanOrEqual(2000000000000000n),
    tokenIn: '0x0000000000000000000000000000000000000000',
    tokenOut: '0x4300000000000000000000000000000000000003',
    amountOut: GreaterThanOrEqual(8000000000000000000n),
  },
}

export const EXACT_TOKENS_FOR_ETH_V2: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 81457,
    from: '0xa32fcc1b3d4e2b597cf626f98228e68b63ef46f0',
    hash: '0xf109cf66af11cfe4b716290cc58303a928bfc8792435e0ef1c179066ee7b42ab',
    input:
      '0x18cbafe500000000000000000000000000000000000000000000002ae6537f31ed200000000000000000000000000000000000000000000000000000083174bc5c70665f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a32fcc1b3d4e2b597cf626f98228e68b63ef46f000000000000000000000000000000000000000000000000000000000660df3f7000000000000000000000000000000000000000000000000000000000000000200000000000000000000000067fa2887914fa3729e9eed7630294fe124f417a00000000000000000000000004300000000000000000000000000000000000004',
    to: '0x98994a9a7a2570367554589189dc9772241650f6',
    value: '0',
  },
  params: {
    chainId: 81457,
    amountIn: GreaterThanOrEqual(790000000000000000000n),
    tokenIn: '0x67fa2887914fA3729e9EED7630294Fe124f417A0',
    tokenOut: '0x0000000000000000000000000000000000000000',
    amountOut: GreaterThanOrEqual(500000000000000000n),
  },
}
export const TOKENS_FOR_EXACT_ETH_V2: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 81457,
    from: '0x25cb3f48e486e0582b318377dcda112c25de78c6',
    hash: '0xe47a3fdb4a6831f3a62b04341c95a1c5e678c640f6e9b7865fd5a29cec6da548',
    input:
      '0x4a25d94a0000000000000000000000000000000000000000000000000003acbfa11130110000000000000000000000000000000000000000000000002f8db74ce07bc04e00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000025cb3f48e486e0582b318377dcda112c25de78c600000000000000000000000000000000000000000000000000000000660dd0c3000000000000000000000000000000000000000000000000000000000000000200000000000000000000000043000000000000000000000000000000000000030000000000000000000000004300000000000000000000000000000000000004',
    to: '0x98994a9a7a2570367554589189dc9772241650f6',
    value: '0',
  },
  params: {
    chainId: 81457,
    amountIn: GreaterThanOrEqual(3000000000000000000n),
    tokenIn: '0x4300000000000000000000000000000000000003',
    tokenOut: '0x0000000000000000000000000000000000000000',
    amountOut: GreaterThanOrEqual(1000000000000000n),
  },
}

export const EXACT_TOKENS_FOR_TOKENS_V2: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 81457,
    from: '0x865c301c46d64de5c9b124ec1a97ef1efc1bcbd1',
    hash: '0x64a68c2018464867a1dc67671b4b716f4d626d4569e53a2a352be09f08641dfc',
    input:
      '0x38ed17390000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000000000000000000000000008e087afc4c344b6e000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000865c301c46d64de5c9b124ec1a97ef1efc1bcbd100000000000000000000000000000000000000000000000000000000660de024000000000000000000000000000000000000000000000000000000000000000200000000000000000000000043000000000000000000000000000000000000030000000000000000000000005ffd9ebd27f2fcab044c0f0a26a45cb62fa29c06',
    to: '0x98994a9a7a2570367554589189dc9772241650f6',
    value: '0',
  },
  params: {
    chainId: 81457,
    amountIn: GreaterThanOrEqual(5000000000000000000n),
    tokenIn: '0x4300000000000000000000000000000000000003',
    tokenOut: '0x5ffd9ebd27f2fcab044c0f0a26a45cb62fa29c06',
    amountOut: GreaterThanOrEqual(1n),
  },
}
export const TOKENS_FOR_EXACT_TOKENS_V2: TestParams<SwapActionParams> = {
  transaction: {
    chainId: 81457,
    from: '0x026ff4a6e7969d4f23c5bbf225ecc667c2843bcf',
    hash: '0xe7fa1f6d92ae14a96e4451e65715a9b897acb2410d7db2c6e98064bdb4bad394',
    input:
      '0x8803dbee0000000000000000000000000000000000000000000000015af1d78b58c4000000000000000000000000000000000000000000000000007c0a0b298fd0aee95700000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000026ff4a6e7969d4f23c5bbf225ecc667c2843bcf00000000000000000000000000000000000000000000000000000000660ddb950000000000000000000000000000000000000000000000000000000000000003000000000000000000000000d582879453337bd149ae53ec2092b0af5281d1d700000000000000000000000043000000000000000000000000000000000000040000000000000000000000004300000000000000000000000000000000000003',
    to: '0x98994a9a7a2570367554589189dc9772241650f6',
    value: '0',
  },
  params: {
    chainId: 81457,
    amountIn: GreaterThanOrEqual(2200000000000000000000n),
    tokenIn: '0xd582879453337BD149Ae53EC2092B0af5281d1D7',
    tokenOut: '0x4300000000000000000000000000000000000003',
    amountOut: GreaterThanOrEqual(20000000000000000000n),
  },
}

export const passingTestCases = [
  // V2 Tests
  createTestCase(
    EXACT_TOKENS_FOR_TOKENS_V2,
    'when swapping exact Tokens for Tokens (V2)',
  ),
  createTestCase(
    TOKENS_FOR_EXACT_TOKENS_V2,
    'when swapping Tokens for exact Tokens (V2)',
  ),
  createTestCase(
    EXACT_TOKENS_FOR_ETH_V2,
    'when swapping exact Tokens for ETH (V2)',
  ),
  createTestCase(
    ETH_FOR_EXACT_TOKENS_V2,
    'when swapping ETH for exact Tokens (V2)',
  ),
  createTestCase(
    EXACT_ETH_FOR_TOKENS_V2,
    'when swapping exact ETH for Tokens (V2)',
  ),
  createTestCase(
    ETH_FOR_EXACT_TOKENS_V2,
    'when swapping ETH for exact Tokens (V2)',
  ),
  createTestCase(EXACT_TOKENS_FOR_TOKENS_V2, 'when all amount is "any" (V2)', {
    amountIn: undefined,
    amountOut: undefined,
  }),
  createTestCase(
    EXACT_TOKENS_FOR_TOKENS_V2,
    'when all token/amount is "any" (V2)',
    {
      tokenIn: undefined,
      amountIn: undefined,
      tokenOut: undefined,
      amountOut: undefined,
    },
  ),
  // V3 Tests
  createTestCase(ETH_FOR_TOKENS_V3, 'when swapping ETH for Tokens (V3)'),
  createTestCase(TOKENS_FOR_ETH_V3, 'when swapping Tokens for ETH (V3)'),
  createTestCase(TOKENS_FOR_TOKENS_V3, 'when swapping Tokens for Tokens (V3)'),
  createTestCase(TOKENS_FOR_TOKENS_V3, 'when all amount is "any" (V3)', {
    amountIn: undefined,
    amountOut: undefined,
  }),
  createTestCase(TOKENS_FOR_TOKENS_V3, 'when all token/amount is "any" (V3)', {
    tokenIn: undefined,
    amountIn: undefined,
    tokenOut: undefined,
    amountOut: undefined,
  }),
]

export const failingTestCases = [
  createTestCase(ETH_FOR_TOKENS_V3, 'when chainId is not correct', {
    chainId: 42161,
  }),
  createTestCase(TOKENS_FOR_TOKENS_V3, 'when tokenIn is not correct', {
    tokenIn: '0x42E12D42b3d6C4A74a88A61063856756Ea2DB357',
  }),
  createTestCase(EXACT_TOKENS_FOR_TOKENS_V2, 'when tokenOut is not correct', {
    tokenOut: '0x42E12D42b3d6C4A74a88A61063856756Ea2DB357',
  }),
  createTestCase(
    EXACT_ETH_FOR_TOKENS_V2,
    'when amount is not sufficient (ETH V2)',
    { amountIn: parseEther('1000') },
  ),
  createTestCase(
    TOKENS_FOR_EXACT_ETH_V2,
    'when amount is not sufficient (Tokens V2)',
    { amountOut: parseEther('1000') },
  ),
  createTestCase(ETH_FOR_TOKENS_V3, 'when amount is not sufficient (ETH V3)', {
    amountIn: parseEther('1000'),
  }),
  createTestCase(
    TOKENS_FOR_TOKENS_V3,
    'when amount is not sufficient (Tokens V3)',
    { amountOut: parseEther('1000') },
  ),
]
