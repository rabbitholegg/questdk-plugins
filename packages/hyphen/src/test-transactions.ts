import { CHAIN_TO_TOKENS } from './chain-to-tokens'
import { GreaterThanOrEqual } from '@rabbitholegg/questdk'
import {
  type BridgeActionParams,
  Chains,
  type TestParams,
  createTestCase,
} from '@rabbitholegg/questdk-plugin-utils'
import { parseEther, zeroAddress } from 'viem'

export const NATIVE_TRANSFER: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 10,
    from: '0xb03118842b69d64f5f788ee848bdb21a393001fa',
    to: '0x856cb5c3cbbe9e2e21293a644aa1f9363cee11e8',
    hash: '0xf49e850ba9a8eddee87789731b010579eea11e915dca1caf65cbc8b34f3f8e0f',
    input:
      '0xea368421000000000000000000000000b03118842b69d64f5f788ee848bdb21a393001fa000000000000000000000000000000000000000000000000000000000000a4b10000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000948595048454e5f55490000000000000000000000000000000000000000000000',
    value: '68000000000000000',
  },
  params: {
    chainId: Chains.OPTIMISM,
    destinationChainId: Chains.ARBITRUM_ONE,
    tokenAddress: zeroAddress,
    amount: GreaterThanOrEqual(100000n),
  },
}

export const ERC20_TRANSFER: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 1,
    from: '0xbd9b62b900edbc8c9f5344f3b59ae075f5b8317b',
    to: '0x2a5c2568b10a0e826bfa892cf21ba7218310180b',
    hash: '0xbb7a23d915fd2b7e2df1e5116a785210c48671b0db5b790659db7f922d2c18ca',
    input:
      '0x55d735950000000000000000000000000000000000000000000000000000000000000038000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000bd9b62b900edbc8c9f5344f3b59ae075f5b8317b00000000000000000000000000000000000000000000000000000000ef060c5800000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000948595048454e5f55490000000000000000000000000000000000000000000000',
    value: '0',
  },
  params: {
    chainId: Chains.ETHEREUM,
    destinationChainId: Chains.BINANCE_SMART_CHAIN,
    tokenAddress: CHAIN_TO_TOKENS[Chains.ETHEREUM][0], // USDT
    amount: GreaterThanOrEqual(100000n),
  },
}

export const ERC20_BRIDGE_SWAP: TestParams<BridgeActionParams> = {
  transaction: {
    chainId: 1,
    from: '0x345d149364f3a73830c3392f3f2897382fc0c04e',
    to: '0x2a5c2568b10a0e826bfa892cf21ba7218310180b',
    hash: '0x83c5bcde1b8e74590c90b5da6a71cc1c27a5c811b83af742713eff371d6418bc',
    input:
      '0xbcc1f5ad000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000345d149364f3a73830c3392f3f2897382fc0c04e000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000231268e6800000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000948595048454e5f55490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000003b6fe3290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000',
    value: '0',
  },
  params: {
    chainId: Chains.ETHEREUM,
    destinationChainId: Chains.OPTIMISM,
    tokenAddress: CHAIN_TO_TOKENS[Chains.ETHEREUM][1], // USDC
    amount: GreaterThanOrEqual(100000n),
  },
}

export const passingTestCases = [
  createTestCase(NATIVE_TRANSFER, 'when doing a native transfer'),
  createTestCase(ERC20_TRANSFER, 'when doing an ERC20 transfer'),
  createTestCase(ERC20_BRIDGE_SWAP, 'when doing an ERC20 bridge swap'),
  createTestCase(ERC20_BRIDGE_SWAP, 'when tokenAddress is "any"', {
    tokenAddress: undefined,
  }),
  createTestCase(ERC20_BRIDGE_SWAP, 'when amount is "any"', {
    amount: undefined,
  }),
  createTestCase(NATIVE_TRANSFER, 'when tokenAddress is "any" (native)', {
    tokenAddress: undefined,
  }),
  createTestCase(
    ERC20_TRANSFER,
    'when amount and tokenAddress are "any" (erc20)',
    {
      amount: undefined,
      tokenAddress: undefined,
    },
  ),
]

export const failingTestCases = [
  createTestCase(NATIVE_TRANSFER, 'when destinationChainId is incorrect', {
    destinationChainId: Chains.OPTIMISM,
  }),
  createTestCase(ERC20_TRANSFER, 'when tokenAddress is incorrect', {
    tokenAddress: zeroAddress,
  }),
  createTestCase(ERC20_BRIDGE_SWAP, 'when amount is insufficient', {
    amount: parseEther('1000'),
  }),
]
